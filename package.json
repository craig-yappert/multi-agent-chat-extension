{
  "name": "multi-agent-chat",
  "displayName": "Multi Agent Chat",
  "description": "Collaborative Multi-Agent AI Chat Interface for VS Code",
  "version": "1.15.2",
  "publisher": "craig-yappert",
  "author": "Craig Yappert",
  "repository": {
    "type": "git",
    "url": "https://github.com/craig-yappert/multi-agent-chat-extension"
  },
  "license": "SEE LICENSE IN LICENSE",
  "engines": {
    "vscode": "^1.94.0"
  },
  "categories": [
    "Other",
    "AI",
    "Chat",
    "Machine Learning",
    "Snippets",
    "Programming Languages",
    "Education",
    "Testing",
    "Formatters",
    "Linters"
  ],
  "keywords": [
    "claude code",
    "code explanation",
    "code generation",
    "code summary",
    "code transform",
    "vibe coding",
    "prompt language",
    "copilot",
    "claude",
    "ai",
    "assistant",
    "chatbot",
    "chat",
    "anthropic",
    "code",
    "programming",
    "development",
    "productivity"
  ],
  "icon": "icon.png",
  "main": "./out/extension.js",
  "activationEvents": [
    "onStartupFinished"
  ],
  "contributes": {
    "commands": [
      {
        "command": "multiAgentChat.openChat",
        "title": "Open Multi Agent Chat",
        "category": "Multi Agent Chat",
        "icon": "icon.png"
      },
      {
        "command": "multiAgentChat.clearAllConversations",
        "title": "Clear All Conversation History",
        "category": "Multi Agent Chat"
      },
      {
        "command": "multiAgentChat.initializeProject",
        "title": "Initialize Multi Agent Chat Project",
        "category": "Multi Agent Chat"
      },
      {
        "command": "multiAgentChat.migrateConversations",
        "title": "Migrate Conversations to Project",
        "category": "Multi Agent Chat"
      },
      {
        "command": "multiAgentChat.showMigrationStatus",
        "title": "Show Migration Status",
        "category": "Multi Agent Chat"
      },
      {
        "command": "multiAgentChat.openModelsConfig",
        "title": "Open Models Configuration",
        "category": "Multi Agent Chat"
      },
      {
        "command": "multiAgentChat.resetModelsToDefaults",
        "title": "Reset Models to Defaults",
        "category": "Multi Agent Chat"
      },
      {
        "command": "multiAgentChat.reloadConfigs",
        "title": "Reload Model Configurations",
        "category": "Multi Agent Chat"
      },
      {
        "command": "multiAgentChat.openAgentsConfig",
        "title": "Open Agents Configuration",
        "category": "Multi Agent Chat"
      },
      {
        "command": "multiAgentChat.resetAgentsToDefaults",
        "title": "Reset Agents to Defaults",
        "category": "Multi Agent Chat"
      },
      {
        "command": "multiAgentChat.manageApiKeys",
        "title": "Manage API Keys",
        "category": "Multi Agent Chat"
      }
    ],
    "keybindings": [
      {
        "command": "multiAgentChat.openChat",
        "key": "ctrl+shift+c",
        "mac": "cmd+shift+c"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "multiAgentChat.openChat"
        }
      ],
      "editor/context": [
        {
          "command": "multiAgentChat.openChat",
          "group": "claude@1",
          "when": "editorTextFocus"
        }
      ],
      "editor/title": [
        {
          "command": "multiAgentChat.openChat",
          "group": "navigation@1",
          "when": "true"
        }
      ],
      "editor/title/context": [
        {
          "command": "multiAgentChat.openChat",
          "group": "claude@1"
        }
      ],
      "explorer/context": [
        {
          "command": "multiAgentChat.openChat",
          "group": "claude@1"
        }
      ],
      "scm/title": [
        {
          "command": "multiAgentChat.openChat",
          "group": "navigation@1",
          "when": "true"
        }
      ],
      "view/title": [
        {
          "command": "multiAgentChat.openChat",
          "group": "navigation@1",
          "when": "view == workbench.explorer.fileView"
        }
      ],
      "touchBar": [
        {
          "command": "multiAgentChat.openChat",
          "group": "editing",
          "when": "true"
        }
      ],
      "menuBar/file": [
        {
          "command": "multiAgentChat.openChat",
          "group": "1_new@1"
        }
      ]
    },
    "configuration": [
      {
        "title": "API Keys",
        "properties": {
          "multiAgentChat.apiKeys.claude": {
            "type": "string",
            "default": "",
            "deprecationMessage": "⚠️ DEPRECATED: API keys are now stored securely. Use 'Manage API Keys' command instead.",
            "markdownDescription": "**⚠️ DEPRECATED:** API keys are now stored in SecretStorage for security. Use Command Palette → `Multi Agent Chat: Manage API Keys` instead. Old keys here will be migrated automatically.",
            "order": 1
          },
          "multiAgentChat.apiKeys.openai": {
            "type": "string",
            "default": "",
            "deprecationMessage": "⚠️ DEPRECATED: API keys are now stored securely. Use 'Manage API Keys' command instead.",
            "markdownDescription": "**⚠️ DEPRECATED:** API keys are now stored in SecretStorage for security. Use Command Palette → `Multi Agent Chat: Manage API Keys` instead. Old keys here will be migrated automatically.",
            "order": 2
          }
        }
      },
      {
        "title": "Global Settings",
        "properties": {
          "multiAgentChat.defaultModel": {
            "type": "string",
            "enum": [
              "claude-3-opus",
              "claude-3-sonnet",
              "claude-3-haiku",
              "gpt-4",
              "gpt-3.5-turbo"
            ],
            "default": "claude-3-sonnet",
            "description": "Default AI model for all agents",
            "order": 3
          },
          "multiAgentChat.defaultProvider": {
            "type": "string",
            "enum": [
              "claude",
              "openai",
              "local"
            ],
            "default": "claude",
            "description": "Default provider for all agents",
            "order": 4
          },
          "multiAgentChat.permissions.yoloMode": {
            "type": "boolean",
            "default": false,
            "description": "⚠️ YOLO Mode: Auto-approve all agent actions (use with caution!)",
            "markdownDescription": "**⚠️ Warning:** Enables automatic approval of all file operations and commands. Agents can execute any action without confirmation.",
            "order": 5
          },
          "multiAgentChat.permissions.defaultPolicy": {
            "type": "string",
            "enum": [
              "ask",
              "allow",
              "deny"
            ],
            "default": "ask",
            "enumDescriptions": [
              "Always ask for permission",
              "Allow all operations (similar to YOLO mode)",
              "Deny all operations by default"
            ],
            "description": "Default permission policy for agent actions",
            "order": 6
          }
        }
      },
      {
        "title": "Agent Configuration",
        "properties": {
          "multiAgentChat.agents.defaultAgent": {
            "type": "string",
            "enum": [
              "team",
              "architect",
              "coder",
              "executor",
              "reviewer",
              "documenter",
              "coordinator"
            ],
            "default": "team",
            "description": "Default agent to use when starting a conversation",
            "order": 7
          },
          "multiAgentChat.agents.enableInterCommunication": {
            "type": "boolean",
            "default": true,
            "description": "Allow agents to communicate with each other",
            "order": 8
          },
          "multiAgentChat.agents.showInterCommunication": {
            "type": "boolean",
            "default": false,
            "description": "Show formatted summary of inter-agent responses (redundant with live messages, usually disabled)",
            "order": 9
          },
          "multiAgentChat.interAgentComm.maxConcurrent": {
            "type": "number",
            "default": 3,
            "description": "Maximum number of agents that can process messages concurrently",
            "minimum": 1,
            "maximum": 10,
            "order": 10
          },
          "multiAgentChat.interAgentComm.maxMessagesPerConversation": {
            "type": "number",
            "default": 10,
            "description": "Maximum number of messages allowed per inter-agent conversation to prevent infinite loops",
            "minimum": 5,
            "maximum": 50,
            "order": 11
          },
          "multiAgentChat.interAgentComm.maxConversationDepth": {
            "type": "number",
            "default": 5,
            "description": "Maximum depth of message chains in inter-agent conversations",
            "minimum": 2,
            "maximum": 20,
            "order": 12
          }
        }
      },
      {
        "title": "Project Settings",
        "properties": {
          "multiAgentChat.project.useLocalStorage": {
            "type": "boolean",
            "default": true,
            "description": "Store conversations in project's .machat folder",
            "markdownDescription": "When enabled, conversations are saved to `.machat/conversations/` in your project instead of global storage",
            "order": 10
          },
          "multiAgentChat.project.autoInitialize": {
            "type": "boolean",
            "default": false,
            "description": "Automatically create .machat folder for new projects",
            "order": 11
          },
          "multiAgentChat.project.shareSettings": {
            "type": "boolean",
            "default": true,
            "description": "Use .machat/config.json for project-specific settings",
            "order": 12
          }
        }
      },
      {
        "title": "Performance",
        "properties": {
          "multiAgentChat.performance.enableStreaming": {
            "type": "boolean",
            "default": true,
            "description": "Enable response streaming for real-time feedback",
            "order": 13
          },
          "multiAgentChat.performance.enableCache": {
            "type": "boolean",
            "default": true,
            "description": "Cache responses for repeated queries (5 minute TTL)",
            "order": 14
          },
          "multiAgentChat.performance.quickTeamMode": {
            "type": "boolean",
            "default": false,
            "description": "Quick team mode: Query only 3 most relevant agents",
            "order": 15
          },
          "multiAgentChat.performance.agentTimeout": {
            "type": "number",
            "default": 60000,
            "minimum": 10000,
            "maximum": 120000,
            "description": "Timeout per agent in milliseconds (default: 60 seconds, increase for complex architectural responses)",
            "order": 16
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.94.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.5.0",
    "eslint": "^9.25.1",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "@types/express": "^5.0.3",
    "@types/ws": "^8.18.1",
    "express": "^5.1.0",
    "ws": "^8.18.3"
  }
}
